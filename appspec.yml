version: 0.0          # (1)
os: linux
files:
  - source: /         # (2)
    destination: /home/ec2-user/app/step2/zip/    # (3)
    overwrite: yes    # (4)

permissions:           # (5)
  - object: /
    pattern: "**"
    owner: ec2-user
    group: ec2-user

hooks:                # (6)
  AfterInstall:
    - location: stop.sh    # Nginx와 연결되어 있지 않은 스프링 부트를 종료한다.
      timeout: 60
      runas: ec2-user
  ApplicationStart:
    - location: deploy.sh  # Nginx와 연결되어 있지 않은 Port로 새 버전의 스프링 부트를 시작한다.
      timeout: 60
      runas: ec2-user
  ValidateService:
    - location: health.sh  # 새 스프링 부트가 정상적으로 실행됐는지 확인한다.
      timeout: 60
      runas: ec2-user



# (1) version
#     * CodeDeploy 버전을 이야기한다.
#     * 프로젝트 버전이 아니므로 0.0 외에 다른 버전을 사용하면 오류가 발생한다.

# (2) source
#     * CodeDeploy에서 전달해 준 파일 중 destination으로 이동시킬 대상을 지정한다.
#     * 루트 경로(/)를 지정하면 전체 파일을 이야기한다.

# (3) destination
#     * source에서 지정된 파일을 받을 위치이다.
#     * 이후 Jar를 실행하는 등은 destination에서 옮긴 파일들로 진행됩니다.

# (4) overwrite
#     * 기존에 파일들이 있으며 덮어쓸지를 결정한다.
#     * 현재 yes라고 했으니 파일들을 덮어쓰게 된다.

# (5) permissions
#     * CodeDeploy에서 EC2 서버로 넘겨준 파일들을 모두 ec2-user 권한을 갖도록 한다.

# (6) hooks
#     * CodeDeploy 배포 단계에서 실행할 명령어를 지정한다.
#     * ApplicationStart라는 단계에서 deploy.sh를 ec2-user 권한으로 실행하게 한다.
#     * timeout: 60으로 스크립트 실행 60초 이상 수행되면 실패가 된다(무한정 기다림을 방지하기 위함)


# stop.sh   : 기존 Nginx에 연결되어 있진 않지만, 실행 중이던 스프링부트 종료
# start.sh  : 배포할 신규 버전 스프링부트 프로젝트를 stop.sh로 종료한 'profile'로 실행
# health.sh : 'start.sh'로 실행시킨 프로젝트가 정상적으로 실행됐는지 체크
# switch.sh : Nginx가 바라보는 스프링부트를 최신 버전으로 변경
# profile.sh: 앞선 4개 스크립트 파일에서 공용으로 사용할 'profile'과 포트 체크 로직