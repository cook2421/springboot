
※ 1
총 3단계를 통해 배포 방식 개선

STEP.1  스크립트를 실행하여 수동으로 프로젝트 test&build 하기
    * 프로젝트 설정 - MariaDB 드라이버 등록(build.gradle)
    * RDB에 프로젝트에 사용되는 테이블 생성
    * 외부 Security 파일 등록
    * 배포 스크립트 작성
    * EC2 설정 - RDS 접속 정보 설정
    * EC2에서 소셜 로그인

STEP.2 깃허브에 Push하면 자동 Test&Build&Deploy
    * Github와 Travis CI 연동
    * 프로젝트 Travis CI(.travis.yml) 설정
    * Travis CI와 AWS S3 연동
        - AWS Key(IAM, Identity and Access Management) 발급
        - Travis CI에 IAM키 등록
        - AWS S3 버킷 생성
        - Travis CI의 빌드내용(Jar)을 S3에 올리기 위해 프로젝트(.travis.yml)에 설정 추가
    * Travis CI와 AWS S3, CodeDeploy 연동하기
        - EC2와 CodeDeploy 연동
        - CodeDeploy 연동을 위해 EC2에서 사용할 IAM 역할 생성
        - EC2 서버에 CodeDeploy 에이전트 설치
        - CodeDeploy -> EC2 접근을 위해 CodeDeploy에서 사용할 IAM 역할 생성
        - CodeDeploy 생성
        - CodeDeploy 관련 설정을 appspec.yml에 추가
        - Travis CI 설정 파일(.travis.yml)에 CodeDeploy 내용을 추가
    * 배포 자동화 구성(스크립트 파일(.sh) 작성)
        - 배포를 위한 스크립트(Jar, appspec.yml)가 아닌 것을 제외하기 위해 .travis.yml 내용 수정
        - CodeDeploy 명령을 담당할 appspec.yml 파일 수정
    * CodeDeploy 로그 확인

STEP.3 Nginx 무중단 배포
    * EC2 서버에 Nginx 설치 -> 서비스 시작
    * EC2 보안 그룹 추가 : 80 포트
    * 구글, 네이버 리디렉션 URI 추가
    * 프로젝트와 Nginx 연동
    * 무중단 배포 스크립트 작성
        - 8001, 8002 어느 포트를 사용할지 판단하는 API 작성(/profile-real: TravisCI 배포 자동화를 위한 profile입니다)
        - 무중단 배포를 위한 profile 2개(real1, real2) 추가(application-real1,2.properties 파일 생성)
        - EC2 서버의 Nginx 설정 수정
        - 배포 장소 변경/배포 스크립트 사용할 수 있도록 appspec.yml 내용 수정
        - 프로젝트에 배포 스크립트 작성(5개, profile, start, stop, health, switch)





※ 2
[Deploy Shell Script]

#!/bin/bash

REPOSITORY=/home/ec2-user/app/step1         # (1)
PROJECT_NAME=springboot

cd $REPOSITORY/$PROJECT_NAME/       # (2)

echo "> Git Pull"       # (3)

git pull

echo "> 프로젝트 Build 시작"

./gradlew build         # (4)

echo "> step 1 디렉토리로 이동"

cd $REPOSITORY

echo "> Build 파일 복사"

cp $REPOSITORY/$PROJECT_NAME/build/libs/*.jar $REPOSITORY/      # (5)

echo "> 현재 구동중인 애플리케이션 pid 확인"

CURRENT_PID=$(pgrep -f ${PROJECT_NAME}.*.jar)        # (6)

echo "> 현재 구동중인 애플리케이션 pid: $CURRENT_PID"

if [ -z "$CURRENT_PID" ]; then      # (7)
    echo "> 현재 구동 중인 애플리케이션이 없으므로 종료하지 않습니다."
else
    echo "> kill -15 $CURRENT_PID"
    kill -15 $CURRENT_PID
    sleep 5
fi

echo "> 새 애플리케이션 배포"

JAR_NAME=$(ls -tr $REPOSITORY/ | grep *.jar | tail -n 1)        # (8)

echo "> JAR Name: $JAR_NAME"

# 시큐리티 설정 전 nohup java -jar $REPOSITORY/|$JAR_NAME 2>1 & (9)

nohup java -jar \
        -Dspring.config.location=classpath:/application.properties,/home/ec2-user/app/application-oauth.properties \
        $REPOSITORY/$JAR_NAME 2>&1 & # 시큐리티 설정 후 (10)



(1) REPOSITORY=/home/ec2-user/app/step1
    - 프로젝트 디렉토리 주소는 스크립트 내에서 자주 사용하는 값이기 때문에 이를 변수로 저장한다.
    - 마찬가지로 PROJECT_NAME=springboot도 동일하게 변수로 저장한다.
    - 쉘에서는 타입 없이 선언하여 저장한다.
    - 쉘에서는 $ 변수명으로 변수를 사용할 수 있다.

(2) cd $REPOSITORY/$PROJECT_NAME/
    - 제일 처음 git clone 받았던 디렉토리로 이동한다.
    - 바로 위의 쉘 변수 설명을 따라 /home/ec2-user/app/step1/springboot 주소로 이동한다.

(3) git pull
    - 디렉토리 이동 후, master 브랜치의 최신 내용을 받는다.

(4) ./gradlew build
    - 프로젝트 내부의 gradlew로 build를 수행한다.

(5) cp ./build/libs/*.jar $REPOSITORY/
    - build의 결과물인 jar 파일을 복사해 jar 파일을 모아둔 위치로 복사한다.

(6) CURRENT_PID=$(pgrep -f springboot.*.jar)
    - pgrep은 process id만 추출하는 명령어이다.
    - -f 옵션은 프로세스 이름으로 찾는다.

(7) if ~ else ~ fi
    - 현재 구동 중인 프로세스가 있는지 없는지 판단해서 기능을 수행한다.
    - process id 값을 보고 프로세스가 있으면 해당 프로세스를 종료한다.

(8) JAR_NAME=$(ls -tr $REPOSITORY/ | grep *.jar | tail -n 1)
    - 새로 실행할 jar 파일명을 찾는다.
    - 여러 jar 파일이 생기기 때문에 tail -n로 가장 나중의 jar파일(최신 파일)을 변수에 저장한다.

(9) nohup java -jar $REPOSITORY/|$JAR_NAME 2>1 $
    - 찾은 jar 파일명으로 해당 jar파일을 nohup으로 실행한다.
    - 스프링 부트의 장점으로 특별히 외장 톰캣을 설치할 필요가 없다.
    - 내장 톰캣을 사용해서 jar 파일만 있으면 바로 웹 애플리케이션 서버를 실행할 수 있다.
    - 일반적으로 자바를 실행할 때는 java -jar라는 명령어를 사용하지만, 이렇게 하면 사용자가 터미널
      접속을 끊을 때 애플리케이션도 같이 종료된다.
    - 애플리케이션 실행자가 터미널을 종료해도 애플리케이션은 계속 구동될 수 있도록 nohup 명령어를 사용한다.

(10) -Dspring.config.location
    - 스프링 설정 파일 위치를 지정한다.
    - 기본 옵션들을 담고 있는 application.properties와 OAuth 설정들을 담고 있는 application-oauth.properties의 위치를 저장한다.
    - classpath가 붙으면 jar 안에 있는 resources 디렉토리를 기준으로 경로가 생성된다.
    - application-oauth.properties은 절대 경로를 사용한다. 외부에 파일이 있기 때문이다.





※ 3
application-real-db.properties

(1) spring.jpa.hibernate.ddl-auto=none
    - JPA로 테이블이 자동 생성되는 옵션을 None(생성하지 않음)으로 지정한다.
    - RDS에는 실제 운영으로 사용될 테이블이니 절대 스프링 부트에서 새로 만들지 않도록 해야한다.
    - 이 옵션을 하지 않으면 자칫 테이블이 모두 새로 생성될 수 있다.
    - 주의해야 하는 옵션이다.





※ 4
deploy.sh 파일 수정

(1) -Dspring.profiles.active=real
    - application-real.properties를 활성화시킨다.
    - application-real.properties의 spring.profiles.include=oauth,real-db 옵션 때문에
      real-db 역시 함께 활성화 대상에 포함된다.





※ 5
CI & CD 란

CI & CD 란 코드 버전 관리를 하는 VCS시스템(git, svn 등)에 PUSH가 되면 자동으로 테스트와 빌드가 수행되어
안정적인 배포 파일을 만드는 과정을 CI(Continuous Integration-지속적 통합)라고 하며, 이 빌드 경과를 자동으로
운영 서버에 무장단 배포까지 진행하는 과정을 CD(Continuous Deployment-지속적 배포)라고 한다.






※ 6
AWS의 CodeDeploy

CodeDeploy는 AWS의 배포 삼형제 중 하나이다.
(1) Code Commit
    - 깃허브와 같은 코드 저장소의 역할을 한다.
    - 프라이빗 기능을 지원한다는 장점이 있지만, 현재 깃허브에서도 무료로 프라이빗 지원을 하고 있어서 거의 사용되지 않는다.

(2) Code Build
    - Travis CI와 마찬가지로 빌드용 서비스이다.
    - 멀티 모듈을 배포해야 하는 경우 사용해 볼만하지만, 규모가 있는 서비스에서는 대부분 젠킨스/팀시티 등을 이용하니
      이것 역시 사용할 일이 거의 없다.

(3) Code Deploy
    - AWS의 배포 서비스이다.
    - 앞에서 언급한 다른 서비스들은 대체제가 있고 딱히 대체제보다 나은 점이 없지만,
      CodeDeploy는 대체제가 없다.
    - 오토 스케일링 그룹 배포, 블루 그린 배포, 롤링 배포, EC2 단독 배포 등 많은 기능을 지원한다.

현재 프로젝트에서는 Code Commit의 역할은 github가, Code Build의 역할은 Travis CI가 하고 있다.



